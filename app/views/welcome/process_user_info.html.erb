
<div class="col-md-12">

<h1>Welcome#process_user</h1>

<div id="status"></div>

<input type="text" id="category-name">

<button id="add-category">ADD CATEGORY</button>

<button id="done">DONE</button>

<button id="logout">logout</button>
</div>

<div class="friends-display col-md-6">
</div>

<div class="categories-display col-md-6">
</div>


<script>
  function p(str) {console.log(str);}

  $("#add-category").click(function() {
    var category_name = $("#category-name").val();

    // Add to cateogry display
    $(".categories-display").append('<div class="category" data-category=' + category_name.replace(/\W/g,"-") + '><span class="name">' + category_name + '</span><span class="count">0</span></div>');

    $("#category-name").val("");

    // Characterize hover popup checkboxes for easy relationship builder
    $(".hover-popup").each(function(index,elem) {
      $(elem).children(".no-categories").remove();

      var newcategoryHTML = '<div class="popup-category">' + category_name +
        '<input type="checkbox" data-category="' + 
        category_name.replace(/\W/g, "-") + '" data-id="' +
        $(elem).parent().attr("data-id") + '"></div>';

      $(elem).append(newcategoryHTML);
    });

    // Update category count
    $(".popup-category input").change(function() {
      var checked = $(this).prop("checked");
      var category = $(this).attr("data-category");

      var category_count = $('.categories-display div[data-category="' + category + '"] span.count');
      
      category_count.text($('input:checked[data-category="' + category + '"]').length);
    });

  });

  var self_data = {}; // filled in fb call
  var friends_ids = []; // filled in fb call
  var categories = []; // filled on click
  var relationships = {}; // filled on click

  // Submit ajax through send_data
  $("#done").click(function() {
    categories = [];
    relationships = {};

    $(".category").each(function(index,elem) {
      categories.push($(elem).children(".name").text());
    });

    // { {id: [cat1,cat2]}, {id: [cat1]}, ...}
    $(".friend-entry").each(function(index,elem) {
      var friend_id = $(this).attr("data-id");
      var friend_categories_arr = [];
      $(".friend-entry .popup-category").each(function(index,elem) {
        if ($(elem).children("input").prop("checked")) {
          friend_categories_arr.push($(elem).text());
        }
      });

      relationships[friend_id] = friend_categories_arr;
    });

    /*p(self_data);
    p(friends_ids);
    p(categories);
    p(relationships);*/

    send_data(
        self_data,
        friends_ids,
        categories,
        relationships
      );
  });

  function send_data(self, friends, categories, relationships) {
    $.post("/ajax/get_fb_data",
    {
      self: self,
      friends: friends,
      categories: categories,
      relationship: relationships
    },
    function(data) {
      console.log(data);
    });
  }

  $("#logout").click(function() {
    FB.logout(function(response) {
    });
  });





  $("#check-status").click(function() {
    checkLoginState();
  });

  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '922632911135836',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.4' // use version 2.2
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');

    var fields = "picture,id,name,first_name,last_name,age_range,link,gender,locale,timezone,updated_time,verified";
    
    FB.api('/me?fields=' + fields, function(self_response) {
      console.log('Successful login for: ' + self_response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + self_response.name + '!';

      FB.api('/me/friends?fields=' + fields, function(friends_response) {
        if (friends_response && !friends_response.error) {
          document.getElementById("status").innerHTML += " " + friends_response;
          populate_friends_display(friends_response.data);
          
          console.log(self_response);
          self_data = self_response;
        }
      });
    });
  }

  function populate_friends_display(friends) {
    for (var key in friends) {
      var friendObj = friends[key];

      $(".friends-display").append(
        '<div class="friend-entry" data-id=' + friendObj.id + '>\
          <img src="' + friendObj.picture.data.url + '"/>'
          + friendObj.name + 
          '<div class="hover-popup"><div class="no-categories">No categories yet</div></div></div>');
      console.log(friends[key]);

      friends_ids.push(friendObj.id);
    }

    // TODO add hoverboxes instead of logging
    $(".friend-entry").hover(
    function() {
      console.log("in");
    }, function() {
      console.log("out");
    });
  }

</script>

<style>
.friends-display {
  width: 50%;
}
.categories-display {
  width: 50%;
}
.friend-entry, .category {
  border: 1px solid black;
}
</style>