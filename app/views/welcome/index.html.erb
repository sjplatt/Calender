


<style>
.icon-block {
  padding: 0 15px;
}
.icon-block .material-icons {
  font-size: inherit;
}
</style>


<div id="index-banner" class="parallax-container">
  <div class="section no-pad-bot">
    <div class="container">
      <br><br>
      <h1 class="header center amber-text text-lighten-1">SoCal</h1>
      <div class="row center">
        <h5 class="header col s12 light">The <strong>so</strong>cial <strong>cal</strong>endar that...</h5>
      </div>
      <div class="row center">
        <!--a href="http://materializecss.com/getting-started.html" id="download-button" class="btn-large waves-effect waves-light teal lighten-1">Get Started</a-->
        <div class="fb-login-button" data-max-rows="1" data-size="xlarge" data-show-faces="false" data-auto-logout-link="true" data-scope="public_profile,email,user_friends" data-onlogin="checkLoginState();"></div>
      </div>
      <br><br>

    </div>
  </div>
  <div class="parallax"><%= image_tag("banner.jpg") %></div>
</div>


<div class="container">
  <div class="section">

    <!--   Icon Section   -->
    <div class="row">
      <div class="col s12 m4">
        <div class="icon-block">
          <h2 class="center light-blue-text"><i class="material-icons">flash_on</i></h2>
          <h5 class="center">Keep up with what your friends are doing, simply</h5>

          <p class="light">SoCal lets you see what events you have planned and what all your friends are doing in a simple interface.</p>
        </div>
      </div>

      <div class="col s12 m4">
        <div class="icon-block">
          <h2 class="center light-blue-text"><i class="material-icons">group</i></h2>
          <h5 class="center">Compartmentalize your schedule</h5>

          <p class="light">Organize your friends into groups and flip through your spheres of influence.</p>
        </div>
      </div>

      <div class="col s12 m4">
        <div class="icon-block">
          <h2 class="center light-blue-text"><i class="material-icons">settings</i></h2>
          <h5 class="center">Adjust your calendar accordingly</h5>

          <p class="light">Quickly create new events, see what events you have in common with your friends, and control what they can see based on your relationships.</p>
        </div>
      </div>
    </div>

  </div>
</div>

<footer class="page-footer amber">
  <!--div class="container">
    <div class="row">
      <div class="col l6 s12">
        <h5 class="white-text">Company Bio</h5>
        <p class="grey-text text-lighten-4"></p>


      </div>
      <div class="col l3 s12">
        <h5 class="white-text">Settings</h5>
        <ul>
          <li><a class="white-text" href="#!">Link 1</a></li>
          <li><a class="white-text" href="#!">Link 2</a></li>
          <li><a class="white-text" href="#!">Link 3</a></li>
          <li><a class="white-text" href="#!">Link 4</a></li>
        </ul>
      </div>
      <div class="col l3 s12">
        <h5 class="white-text">Connect</h5>
        <ul>
          <li><a class="white-text" href="#!">Link 1</a></li>
          <li><a class="white-text" href="#!">Link 2</a></li>
          <li><a class="white-text" href="#!">Link 3</a></li>
          <li><a class="white-text" href="#!">Link 4</a></li>
        </ul>
      </div>
    </div>
  </div-->
  <div class="footer-copyright">
    <div class="container">
    Made by <a style="text-decoration:underline" class="grey-text text-lighten-2" href="http://github.com/sjplatt">Sam Platt</a> and <a style="text-decoration:underline" class="grey-text text-lighten-2" href="http://github.com/mz496">Matthew Zhu</a>
    </div>
  </div>
</footer>



<!-- facebook API -->

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=922632911135836";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>




<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->

<!--fb:login-button scope="public_profile,email,user_friends" onlogin="checkLoginState();">
</fb:login-button-->




<div id="status" style="display:none">
</div>


<script>
  $(".parallax").parallax();
  $(".parallax img").css("right","0");
  $("nav ul").hide();

  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '922632911135836',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.4' // use version 2.2
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');

    var fields = "id";
    
    FB.api('/me?fields=' + fields, function(self_response) {
      console.log('Successful login for: ' + self_response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + self_response.name + '!';

      FB.api('/me/friends?fields=' + fields, function(friends_response) {
        if (friends_response && !friends_response.error) {
          document.getElementById("status").innerHTML += " " + friends_response;
          send_preliminary_data(self_response, friends_response.data);
        }
      });
    });

    
  }

  function send_preliminary_data(self, friends) {
    $.post("/ajax/get_preliminary_data",
    {self: self,
      friends: friends},
    function(data) {
      console.log(data);
    });
  }

</script>